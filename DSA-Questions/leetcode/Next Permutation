Next Permutation-Leetcode -31

class Solution {
    public void nextPermutation(int[] nums) {

        // step1 : find the breaking point
        //step2 : find the next number the point of breaking, next greater element from the breaking point element
        // step 3: reverse all the element from end of the array to the point+1

        //time complexity = o(n)+o(n)+o(n)= 3 o(n) ~ o(n)
        //space complexity = 0(1)

        //step1
        int n=nums.length;
        int ind=n-2;
        for(;ind>=0;ind--){
            if(nums[ind]<nums[ind+1]){
                break;
            }
        }
        
        // if no element found == last permutation of the given number
        if(ind==-1){
            int i=0,j=n-1;
            while(i<j){
                int temp=nums[i];
                nums[i]=nums[j];
                nums[j]=temp;
                i++;
                j--;
            }     
            return;
        }

        //step2
        for(int i=n-1;i>ind;i--){
            if(nums[i]>nums[ind]){
                int temp=nums[i];
                nums[i]=nums[ind];
                nums[ind]=temp;
                break;
            }
        }

        //step3
        int i=ind+1,j=n-1;
        while(i<=j){
            int temp=nums[i];
            nums[i]=nums[j];
            nums[j]=temp;
            i++;
            j--;
        }        
    }
}
