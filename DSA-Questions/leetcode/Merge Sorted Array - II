
- we use 'shell sort' method
- we use a variable called gap and iterate left and right (lrft=0 & right=left+gap) and compare each element from both arrays.
  swap them accorderly
- if gap == 1 then we break the iteration since we choose the floor of the gap since 1.5 ceil is 2 and it is infinty loop
- To choose ceil we use gap=(len/2)+(len%2) 


class Solution {
    // Function to merge the arrays.
    public static void swap(long arr1[],long arr2[],int i,int j){
        if(arr1[i]>arr2[j]){
            long temp=arr1[i];
            arr1[i]=arr2[j];
            arr2[j]=temp;
        }
    }
    public static void merge(int n, int m, long arr1[], long arr2[]) {
        // code here
        int len=n+m;
        int gap=(len/2) + (len%2);
        
        while(gap>0){
            int left=0,right=left+gap;
            while(right<len){
                
                //arr1 && arr2
                if(left<n && right>=n){
                    swap(arr1,arr2,left,right-n);
                }
                //arr2 arr2
                else if(left>=n){
                    swap(arr2,arr2,left-n,right-n);
                }
                //arr 1 arr1
                else{
                    swap(arr1,arr1,left,right);
                }
                left++;
                right++;
            }
            if(gap==1){
                break;
            }
            gap=(gap/2)+(gap%2);
        }
    }
}
