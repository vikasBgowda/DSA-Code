//It is similar to binary search in rotate array like 
// find which part is sorted and check if Number is present in that part
// In this we have depulate so we check only one condition that is 
if(arr[start] == arr[mid] == arr[end]) ==> then we trim those elements in the next iteration (start++,end--)

public class Solution {
    public static boolean searchInARotatedSortedArrayII(int []A, int k) {
        // Write your code here.
        int n=A.length;
        int start=0,end=n-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(A[mid]==k){
                return true;
            }

            if(A[start]==A[mid] && A[mid]==A[end]){
                start++;
                end--;
                continue;
            }
            
            if(A[start]<=A[mid]){
                if(A[start]<=k && k<=A[mid]){
                    end=mid-1;
                }else{
                    start=mid+1;
                }
            }else{
                if(A[mid]<=k && k<=A[end]){
                    start=mid+1;
                }else{
                    end=mid-1;
                }

            }
        }
        return false;
    }
}
