//here we use various methods to solve by treating each row as an induvidual array
// here to count the number of 1's in an array we use first occance method
// and to calulate the length of 1 's is totalsize of array - firstoccance since we just have 0's and 1's and also it is sorted

class Solution {
    
    static int FindFirst(int arr[],int low,int high){
        int ans=-1;
        while(low<=high){
            int mid=(low+high)>>1;
            if(arr[mid]==1){
                ans=mid;
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return ans;
    }
    
    static int FindLast(int arr[],int low,int high){
        int ans=-1;
        while(low<=high){
            int mid=(low+high)>>1;
            if(arr[mid]==1){
                ans=mid;
                low=mid+1;
            }else if(arr[mid]==0){
                low=mid+1;
            }
        }
        return ans;
    }
    
    public int rowWithMax1s(int arr[][]) {
        // code here
        int n=arr.length;
        int m=arr[0].length;
        int maxCount=0;
        int index=-1;

        for(int i=0;i<n;i++){
            int count=0;
            int low=0,high=m-1;
            int left=FindFirst(arr[i],low,high);
            count= (left==-1)? 0: m-left;

                maxCount=count;
                index=i;
            }
        }
        
        return index;
    }
}
