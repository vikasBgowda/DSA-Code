//here we use proper binary Search but we just add a condition on each function
// for First - if (arrr[mid]) == X then end=mid-1 since we need first occuarence so we go to left.
// similarly for Second if (arrr[mid]) == X then start=mid+1 since we need the last occurance so we need to go to right.

import java.util.ArrayList;

public class Solution {

    public static int FirstOne(ArrayList<Integer>arr , int n ,int k){
        int start=0,end=n-1;
        int ans=-1;
        while(start<=end){
            int mid=start+(end-start)/2;

            if(arr.get(mid)==k){
                ans=mid;
                end=mid-1;
            }
            else if(k>arr.get(mid))
            {
                start=mid+1;
            }else{
                end=mid-1;
            }
        }
        return ans;
        
    }

    public static int LastOne(ArrayList<Integer>arr, int n ,int k){
        int start=0,end=n-1,ans=-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            
            if(arr.get(mid)==k){
                ans=mid;
                start=mid+1;
            }

            else if(arr.get(mid)>k){
                end=mid-1;
            }else{
                start=mid+1;
            }
        }
        return ans;
    }

    public static int[] firstAndLastPosition(ArrayList<Integer> arr, int n, int k) {
        // Write your code here.
        int First = FirstOne(arr, n, k);
        if(First==-1){
            return new {-1,-1};
        }

        int Last=LastOne(arr, n, k);
        int res[]={First,Last};
        return res;
    }

};
