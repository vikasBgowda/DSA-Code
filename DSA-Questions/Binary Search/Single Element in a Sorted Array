// we are using (even,odd) method to check we side we have to elimate 
// check for left part 
        if odd => mid==mid-1 then left part we should elimate and move right =>start= mid+1
        if even => mid==mid+1 then left part we should elimate and move right =>start= mid+1
//else move to left part => end =mid-1

import java.util.ArrayList;
public class Solution
{
    public static int singleNonDuplicate(ArrayList<Integer> arr)
    {
        //    Write your code here.

        int n =arr.size();
        int start=1,end=n-2;
        //edge cases
        if(n==1)return arr.get(0);
        //trimming down the search space so we don't have to deal with left and right search conditions
        if(arr.get(0)!=arr.get(1))return arr.get(0);
        if(arr.get(n-1)!=arr.get(n-2))return arr.get(n-1);

        while(start<=end){
            int mid=start+(end-start)/2;

            if(arr.get(mid-1)!=arr.get(mid) && arr.get(mid+1)!=arr.get(mid)){
                return arr.get(mid);
            }

            // Check which index we are standing (even , odd) => we are in left part and move to right side
            // (odd,even) => we are in right side of the search and we should move to left side

            if((mid%2==1 && arr.get(mid)==arr.get(mid-1)) || mid%2==0 && arr.get(mid)==arr.get(mid+1)){
                start=mid+1;
            }else{
                end=mid-1;
            }
        }
        return -1;
    }
}
