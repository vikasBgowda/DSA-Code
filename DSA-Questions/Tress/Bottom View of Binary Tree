// - It is Reverse of Top view 
// - We are storing the last element of the each vertical nodes

class pair{
    Node node;
    int index;
    pair(Node node,int index){
        this.node=node;
        this.index=index;
    }
}
class Solution
{
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        // Code here
        Queue<pair>qq=new LinkedList<>();
        TreeMap<Integer,Integer>map=new TreeMap<>();
        ArrayList<Integer>res=new ArrayList<>();
        if(root==null) return res;
        
        qq.add(new pair(root,0));
        while(!qq.isEmpty()){
            pair curr=qq.remove();
            Node node=curr.node;
            int index=curr.index;
            // if(!map.containsKey(index)){
            //     map.put(index,node.data);
            // }
            map.put(index,node.data);
            if(node.left!=null){
                qq.add(new pair(node.left,index-1));
            }
            if(node.right!=null){
                qq.add(new pair(node.right,index+1));
            }
        }
        for(Map.Entry<Integer,Integer>curr:map.entrySet()){
            res.add(curr.getValue());
        }
        return res;
    }
}
