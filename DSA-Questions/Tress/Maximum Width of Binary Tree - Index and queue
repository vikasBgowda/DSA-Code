// - we find the maximun width between 2 nodes is using index
// - Understanding
  - if we put index to all the nodes in the tree with increaseing order then we can get width of each level by subtracting last and first node of each level
 - Here we are modifiying the index since we don't want overflowing of the index
  - so for each level we would subtract with the minimun element of the curr level to all the index of the tree in that curr level so we don't overflow for indexing
  - And we keep track of max for each level = last - first + 1 and 
return MAX;
 
class Solution {
    class Pair{
        TreeNode node;
        int index;
        Pair(TreeNode node,int index){
            this.node=node;
            this.index=index;
        }
    }
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null){
            return 0;
        }
        Queue<Pair>qq=new LinkedList<>();
        qq.add(new Pair(root,0));
        int max=Integer.MIN_VALUE;
        while(!qq.isEmpty()){
            int size=qq.size();
            int first=0,last=0;
            int min=qq.peek().index;
            for(int i=0;i<size;i++){
                Pair currPair=qq.remove();
                TreeNode currNode=currPair.node;
                int index=currPair.index-min;
                if(i==0){
                    first=index;
                }
                if(i==size-1){
                   last=index; 
                }
                if(currNode.left!=null){
                    qq.add(new Pair(currNode.left,(index*2)+1));
                }
                if(currNode.right!=null){
                    qq.add(new Pair(currNode.right,(index*2)+2));
                }
            }   
            max=Math.max(max,last-first+1);
        }
        return max;
    }
}
