// Here we use two stack to implement post order
// if we add root to stack1 and go til stack1 is empty and for every iteration we remove element from top and add at element into stack2
// later adding the top element in stack2 and if would also check add if there exist a left node and right node then we add to stack1
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        Stack<TreeNode>st1=new Stack<>();
        Stack<TreeNode>st2=new Stack<>();
        List<Integer>res=new ArrayList<>();
        if(root==null)return res;
        st1.push(root);
        while(!st1.isEmpty()){
            root=st1.pop();
            st2.push(root);
            if(root.left!=null) st1.push(root.left);
            if(root.right!=null) st1.push(root.right);
        }
        while(!st2.isEmpty()){
            res.add(st2.pop().val);
        }
        return res;
    }
}
