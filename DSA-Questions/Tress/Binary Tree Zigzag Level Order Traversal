// Here we travel in zig zag formate 
- We use queue and list to solve the problem
- we use flag to keep the track of the direction
- if we are in the normal(correct) direction we just add the elements directly into inner linkedlist
- if we are in the reverse direction then we add the elements in reverse order for the inner linkedList

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>>res=new ArrayList<>();
        if(root==null){
            return res;
        }
        boolean flag=true;
        Queue<TreeNode>qq=new LinkedList<>();
        qq.add(root);
        while(!qq.isEmpty()){
            int size=qq.size();
            List<Integer>curr=new ArrayList<>();
            for(int i=0;i<size;i++){
                TreeNode currNode=qq.remove();
                if(flag==true){
                    // currect direction
                    curr.add(currNode.val);
                }
                else{
                    // Reverse order
                    curr.add(0,currNode.val);
                }
                if(currNode.left!=null)
                {
                    qq.add(currNode.left);
                }
                if(currNode.right!=null){
                    qq.add(currNode.right);
                }
            }
            flag=!flag;
            res.add(curr);           
        }
         return res;
    }
}
