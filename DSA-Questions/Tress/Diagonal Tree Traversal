// We use queue to find the diagonal elements
// first we iterate the outer loop till the queue is empty
// next we iterate on each size of the queue
// inside the for loop for size we poll (remove) elements from the queue and iterate it till we reach null in through the right elements
// and we also check if there exist a left element through the iteration then we store in the queue
and again check for the elements right nodes and add to queue if there exist an left node.

class Tree
{
     public ArrayList<Integer> diagonal(Node root)
      {
           //add your code here.]
           ArrayList<Integer>res=new ArrayList<>();
           if(root==null) return res;
           Queue<Node>queue=new LinkedList<>();
           queue.add(root);
           while(!queue.isEmpty()){
               int size=queue.size();
               for(int i=0;i<size;i++){
                   Node curr=queue.poll();
                   while(curr!=null){
                       res.add(curr.data);
                       if(curr.left!=null){
                           queue.add(curr.left);
                       }
                       curr=curr.right;
                   }
               }
           }
           return res;
      }
}
