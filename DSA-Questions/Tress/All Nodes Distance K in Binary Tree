1- we are connecting the node to the parent node
2- we are traveling a bfs with the help of queue and also keeping a track of visited array
3- for every node we are travel left ,right, and top.
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer>res=new ArrayList<>();
        if(root==null){
            return res;
        }
        // TreeNode newNode=findTarget(root,target);
        TreeNode newNode=target;
        if(newNode==null) return res;

        HashMap<TreeNode,TreeNode>parent=new HashMap<>();
        Queue<TreeNode>qq=new LinkedList<>();
        qq.add(root);
        while(!qq.isEmpty()){
            // int size=qq.size()
            TreeNode curr=qq.remove();
            if(curr.left!=null){
                parent.put(curr.left,curr);
                qq.add(curr.left);
            }
            if(curr.right!=null){
                parent.put(curr.right,curr);
                qq.add(curr.right);
            }
        }
        int count=0;
        Queue<TreeNode>queue=new LinkedList<>();
        List<TreeNode>visited=new ArrayList<>();
        queue.add(newNode);
        visited.add(newNode);
        while(!queue.isEmpty()){
            int size=queue.size();
            if(count==k){
                while(!queue.isEmpty()){
                    res.add(queue.remove().val);
                }
                return res;
            }
            for(int i=0;i<size;i++){
                TreeNode currNode=queue.remove();
                
                if(currNode.left!=null && !visited.contains(currNode.left)){
                    queue.add(currNode.left);
                    visited.add(currNode.left);
                }
                if(currNode.right!=null && !visited.contains(currNode.right)){
                    queue.add(currNode.right);
                    visited.add(currNode.right);
                }

                if(parent.get(currNode)!=null && !visited.contains(parent.get(currNode))){
                    System.out.println("hello");
                    queue.add(parent.get(currNode));
                    visited.add(parent.get(currNode));
                }
            }
            count++;
        }
        return res;
    }
}
