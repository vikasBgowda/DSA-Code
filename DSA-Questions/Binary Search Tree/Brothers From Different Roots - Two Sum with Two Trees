// Here we add elements of 2 trees into 2 arraylist
// then we keep tow index i and j where i = 0 --- i < arr1 && j= m-1 (last node) --- 0
// then we check if arr of i == j then we increament count and move i++ , j--
// else if arr i + j is > greater then we decrease j -- 
// else i++.

class Solution
{
    public static void inorder(Node root,ArrayList<Integer>arr){
        if(root==null) return;
        inorder(root.left,arr);
        arr.add(root.data);
        inorder(root.right,arr);
    }
	public static int countPairs(Node root1, Node root2, int x)
	{
		// Code here
		if(root1==null || root2==null) return 0;
		ArrayList<Integer>arr1=new ArrayList<>();
		ArrayList<Integer>arr2=new ArrayList<>();
		inorder(root1,arr1);
		inorder(root2,arr2);
		int n=arr1.size();
		int m=arr2.size();
		int i=0,j=m-1,count=0;
		while(i<n && j>=0){
		    int sum=arr1.get(i)+arr2.get(j);
		    if(sum==x){
		        count++;
		        i++;
		        j--;
		    }else if(sum>x){
		        j--;
		    }
		    else{
		        i++;
		    }
		}
		return count;
	}
}
