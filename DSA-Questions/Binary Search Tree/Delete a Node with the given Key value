// Here first we find the if root.left value ==> key then we call function for root.left = function
// This function would make the connection and give the new head so using recursion we can directly connect it
// Now inside the function
    - first we go to right of the keyNode
    - then we find the left most node of the right node of keyNode 
    - Then we attach the leftNode to the leftest node of right node of keynode then we return root.right
since we have done attach to the root.right ==> leftmost node

class Solution {
    public TreeNode findRightLastNode(TreeNode root){
        if(root.left==null){
            return root;
        }
        return findRightLastNode(root.left);
    }
    public TreeNode DeleteFunction(TreeNode root){
        if(root.left==null){
            return root.right;
        }else if(root.right==null){
            return root.left;
        }else{
            TreeNode LeftNode=root.left;
            TreeNode RightLastNode=findRightLastNode(root.right);
            RightLastNode.left=LeftNode;
            return root.right;
        }
    }
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null){
            return root;
        }
        if(root.val==key){
            return DeleteFunction(root);
        }
        TreeNode curr=root;
        while(curr!=null){
            if(curr.val>key){
                if(curr.left!=null && curr.left.val==key){
                    curr.left=DeleteFunction(curr.left);
                    break;
                }else{
                    curr=curr.left;
                }
            }else{
                if(curr.right!=null && curr.right.val==key){
                    curr.right=DeleteFunction(curr.right);
                    break;
                }else{
                    curr=curr.right;
                }
            }
        }
        return root;
    }
}
