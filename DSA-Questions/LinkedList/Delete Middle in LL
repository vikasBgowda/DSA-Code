// we are finding the middle of LL and also keeping the track of previous element of middle
// once slow reach middle 
// we will just link the prev element to slow next or // prev.next=prev.next.next

// we are also solve this problem without keeping the previous element by skipping the one iteration of slow which is initially we just move fast.next=fast.next.next without going inside the loop


public class Solution {
    public static Node deleteMiddle(Node head) {
        // Write your code here.
        if(head==null || head.next==null) return null;

        Node fast=head;
        Node slow=head;
        Node prev=null;
        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            prev=slow;
            slow=slow.next;
        }
        prev.next=prev.next.next;
        return head;
    }
}
