Remove the Loop in LinkedList
- First we find the loop of the linkedList using slow and fast pointer
- We find the first Element of the loop 
- We use next element which is pointing first element of loop .next and we traverse till nextNode . next ! = slow(loop starting element)
- At last we make nextNode is null which would be pointing to the last element if loop exists 

class Solution {
    // Function to remove a loop in the linked list.
    public static void removeLoop(Node head) {
        // code here
        // remove the loop without losing any nodes
        if(head==null || head.next==null) return ;
        Node slow=head;
        Node fast=head;
        boolean flag=false;
        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow){
                flag=true;
                break;
            }
        }
        if(flag==false){
            return ;
        }
        fast=head;
        while(fast!=slow){
            slow=slow.next;
            fast=fast.next;
        }
        Node nextNode=slow.next;
        while(nextNode.next!=slow){
            nextNode=nextNode.next;
        }
        nextNode.next=null;
        return ;
    }
}
