// Here we change the even and odd index at once
// we keep odd at first and even at the second index example => odd=head , even=head.next
// we put the condition for the even pointer since even reach the end first so if even reach ends then automatically odd reachs the end
// other conition is once we set the pointer to curr.next=curr.next.next , before moving the pointer we need to check if next is not null

public class Solution {
    public static Node oddEvenList(Node head) {
        // Write your code here.
        Node EvenEle=head.next;
        Node odd=head;
        Node even=head.next;
        while(even!=null && even.next!=null){
            odd.next=odd.next.next;
            even.next=even.next.next;

            if(odd.next!=null) odd=odd.next;
            if(even.next!=null)even=even.next;
        }
        odd.next=EvenEle;
        if(even!=null){
            even.next=null;
        }
        return head;
    }
}
